}
maxrun <- which(Q.multilayerlObs==max(Q.multilayerlObs))
# This is now the same code as in the for loop of the analyzeModuleAffiliation function
output_folder='output'
# Analyze the values of the modularity function
Q.multilayerlObs <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs.csv',sep=''),he=F,sep=',')))
# MULTILAYER: Get the module affiliations of each species-layer tuple
maxrun <- which(Q.multilayerlObs==max(Q.multilayerlObs))
# This is now the same code as in the for loop of the analyzeModuleAffiliation function
membership <- read.csv('output/S_obs.csv', he=F)
membershipRun <- matrix(membership[,maxrun], nrow=78,ncol=6) # This reshapes the vector to a matrix of dimensions nodes X layers
colnames(membershipRun) <- c('1982','1983','1984','1985','1986','1987')
membershipRun <- as.data.frame(membershipRun)
membershipRun <- cbind(species,c(rep('host',length(hosts)),rep('paras',length(parasites))),membershipRun)
names(membershipRun)[2] <- 'type'
speciesPresence <- rbind(hostAbundYear,t(parasiteAbundanceYear))
speciesPresence[speciesPresence>0] <- 1
if(!all(rownames(speciesPresence)==membershipRun$species)){stop('error')}
membershipRun[,3:8] <- membershipRun[,3:8]*speciesPresence # make zero whenever a species is not in a layer
MNI_aggregated_sum <- MNI_aggregated_mean <- NMI_layers <- c()
l=1
cat(l);cat('\t')
# time slice in the multilayer:
multilayer_affiliation <- membershipRun[,2+l]
multilayer_affiliation <- multilayer_affiliation[multilayer_affiliation!=0]
# Module affiliation in the isolated network's layer:
Q.layer <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.layer)
monolayer_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
monolayer_affiliation <- monolayer_affiliation[,maxrun]
#length(monolayer_affiliation)
#length(speciesPresence[,l])
monolayer_affiliation <- monolayer_affiliation*speciesPresence[,l]
monolayer_affiliation <- monolayer_affiliation[monolayer_affiliation!=0]
length(monolayer_affiliation)
cat(ifelse(length(monolayer_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
cat(length(monolayer_affiliation));cat('\t')
cat(MI(xtabs(~monolayer_affiliation+multilayer_affiliation)));cat('\n')
NMI_layers <- c(NMI_layers, MI(xtabs(~monolayer_affiliation+multilayer_affiliation)))
Q.agg_sum <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.agg_sum)
aggregated_sum__affiliation <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
aggregated_sum__affiliation
aggregated_sum__affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
aggregated_sum__affiliation <- aggregated_sum__affiliation[,maxrun]
aggregated_sum__affiliation
membershipRun
which(membershipRun[,2+l]!=0)
length(which(membershipRun[,2+l]!=0))
aggregated_sum__affiliation <- aggregated_sum__affiliation[which(membershipRun[,2+l]!=0)] # the aggregated networks contains all the species so only take thse species that appear in the layer
MNI_aggregated_sum <- MNI_aggregated_mean <- NMI_layers <- c()
x=c(1,2,3,4,5)
cat(x[-1])
cat(x[length(x)])
cat(l);cat('\t')
# time slice in the multilayer:
multilayer_affiliation <- membershipRun[,2+l]
multilayer_affiliation <- multilayer_affiliation[multilayer_affiliation!=0]
# Module affiliation in the isolated network's layer:
Q.layer <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.layer)
monolayer_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
monolayer_affiliation <- monolayer_affiliation[,maxrun]
#length(monolayer_affiliation)
#length(speciesPresence[,l])
monolayer_affiliation <- monolayer_affiliation*speciesPresence[,l]
monolayer_affiliation <- monolayer_affiliation[monolayer_affiliation!=0]
cat(ifelse(length(monolayer_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
cat(length(monolayer_affiliation));cat('\t')
NMI_layers <- c(NMI_layers, MI(xtabs(~monolayer_affiliation+multilayer_affiliation)))
cat(NMI_layers[length(NMI_layers)]);cat('\n')
Q.agg_sum <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.agg_sum)
aggregated_sum_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
aggregated_sum_affiliation <- aggregated_sum_affiliation[,maxrun]
aggregated_sum_affiliation <- aggregated_sum_affiliation[which(membershipRun[,2+l]!=0)] # the aggregated networks contains all the species so only take thse species that appear in the layer
cat(ifelse(length(aggregated_sum__affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
MNI_aggregated_sum <- c(MNI_aggregated_sum, MI(xtabs(~aggregated_sum_affiliation+multilayer_affiliation)))
cat(MNI_aggregated_sum[length(MNI_aggregated_sum)]);cat('\n')
Q.agg_mean <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_mean.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.agg_mean)
aggregated_mean_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_aggregated_mean.csv',sep=''),he=F,sep=',')))
aggregated_mean_affiliation <- aggregated_mean_affiliation[,maxrun]
aggregated_mean_affiliation <- aggregated_mean_affiliation[which(membershipRun[,2+l]!=0)] # the aggregated networks contains all the species so only take thse species that appear in the layer
cat(ifelse(length(aggregated_mean__affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
cat(ifelse(length(aggregated_mean_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
MNI_aggregated_mean <- c(MNI_aggregated_mean, MI(xtabs(~aggregated_mean_affiliation+multilayer_affiliation)))
cat(MNI_aggregated_mean[length(MNI_aggregated_mean)]);cat('\n')
MNI_aggregated_sum <- MNI_aggregated_mean <- NMI_layers <- c()
for (l in 1:6){
cat(l);cat('\t')
# time slice in the multilayer:
multilayer_affiliation <- membershipRun[,2+l]
multilayer_affiliation <- multilayer_affiliation[multilayer_affiliation!=0]
# Module affiliation in the isolated network's layer:
Q.layer <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.layer)
monolayer_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
monolayer_affiliation <- monolayer_affiliation[,maxrun]
#length(monolayer_affiliation)
#length(speciesPresence[,l])
monolayer_affiliation <- monolayer_affiliation*speciesPresence[,l]
monolayer_affiliation <- monolayer_affiliation[monolayer_affiliation!=0]
cat(ifelse(length(monolayer_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
cat(length(monolayer_affiliation));cat('\t')
NMI_layers <- c(NMI_layers, MI(xtabs(~monolayer_affiliation+multilayer_affiliation)))
cat(NMI_layers[length(NMI_layers)]);cat('\n')
# Module affiliation in the aggregated networks
Q.agg_sum <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.agg_sum)
aggregated_sum_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
aggregated_sum_affiliation <- aggregated_sum_affiliation[,maxrun]
aggregated_sum_affiliation <- aggregated_sum_affiliation[which(membershipRun[,2+l]!=0)] # the aggregated networks contains all the species so only take thse species that appear in the layer
cat(ifelse(length(aggregated_sum_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
MNI_aggregated_sum <- c(MNI_aggregated_sum, MI(xtabs(~aggregated_sum_affiliation+multilayer_affiliation)))
cat(MNI_aggregated_sum[length(MNI_aggregated_sum)]);cat('\n')
Q.agg_mean <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_mean.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.agg_mean)
aggregated_mean_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_aggregated_mean.csv',sep=''),he=F,sep=',')))
aggregated_mean_affiliation <- aggregated_mean_affiliation[,maxrun]
aggregated_mean_affiliation <- aggregated_mean_affiliation[which(membershipRun[,2+l]!=0)] # the aggregated networks contains all the species so only take thse species that appear in the layer
cat(ifelse(length(aggregated_mean_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
MNI_aggregated_mean <- c(MNI_aggregated_mean, MI(xtabs(~aggregated_mean_affiliation+multilayer_affiliation)))
cat(MNI_aggregated_mean[length(MNI_aggregated_mean)]);cat('\n')
}
paste(mean(NMI_layers),sd(NMI_layers))
round(paste(mean(NMI_layers),sd(NMI_layers)),2)
paste(mean(NMI_layers),sd(NMI_layers))
MNI_aggregated_sum <- MNI_aggregated_mean <- NMI_layers <- c()
for (l in 1:6){
cat(l);cat('\t')
# time slice in the multilayer:
multilayer_affiliation <- membershipRun[,2+l]
multilayer_affiliation <- multilayer_affiliation[multilayer_affiliation!=0]
# Module affiliation in the isolated network's layer:
Q.layer <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.layer)
monolayer_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
monolayer_affiliation <- monolayer_affiliation[,maxrun]
#length(monolayer_affiliation)
#length(speciesPresence[,l])
monolayer_affiliation <- monolayer_affiliation*speciesPresence[,l]
monolayer_affiliation <- monolayer_affiliation[monolayer_affiliation!=0]
cat(ifelse(length(monolayer_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
cat(length(monolayer_affiliation));cat('\t')
NMI_layers <- c(NMI_layers, MI(xtabs(~monolayer_affiliation+multilayer_affiliation)))
cat(NMI_layers[length(NMI_layers)]);cat('\n')
# Module affiliation in the aggregated networks
Q.agg_sum <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.agg_sum)
aggregated_sum_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
aggregated_sum_affiliation <- aggregated_sum_affiliation[,maxrun]
aggregated_sum_affiliation <- aggregated_sum_affiliation[which(membershipRun[,2+l]!=0)] # the aggregated networks contains all the species so only take thse species that appear in the layer
cat(ifelse(length(aggregated_sum_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
MNI_aggregated_sum <- c(MNI_aggregated_sum, MI(xtabs(~aggregated_sum_affiliation+multilayer_affiliation)))
cat(MNI_aggregated_sum[length(MNI_aggregated_sum)]);cat('\t')
Q.agg_mean <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_mean.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.agg_mean)
aggregated_mean_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_aggregated_mean.csv',sep=''),he=F,sep=',')))
aggregated_mean_affiliation <- aggregated_mean_affiliation[,maxrun]
aggregated_mean_affiliation <- aggregated_mean_affiliation[which(membershipRun[,2+l]!=0)] # the aggregated networks contains all the species so only take thse species that appear in the layer
cat(ifelse(length(aggregated_mean_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
MNI_aggregated_mean <- c(MNI_aggregated_mean, MI(xtabs(~aggregated_mean_affiliation+multilayer_affiliation)))
cat(MNI_aggregated_mean[length(MNI_aggregated_mean)]);cat('\n')
}
paste(mean(NMI_layers),sd(NMI_layers))
paste(mean(MNI_aggregated_sum),sd(MNI_aggregated_sum))
paste(mean(MNI_aggregated_mean),sd(MNI_aggregated_mean))
MNI_aggregated_sum <- MNI_aggregated_mean <- NMI_layers <- c()
for (l in 1:6){
cat(l);cat('\t')
# time slice in the multilayer:
multilayer_affiliation <- membershipRun[,2+l]
multilayer_affiliation <- multilayer_affiliation[multilayer_affiliation!=0]
# Module affiliation in the isolated network's layer:
Q.layer <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.layer)
monolayer_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_zero_layer_',l,'.csv',sep=''),he=F,sep=',')))
monolayer_affiliation <- monolayer_affiliation[,maxrun]
#length(monolayer_affiliation)
#length(speciesPresence[,l])
monolayer_affiliation <- monolayer_affiliation*speciesPresence[,l]
monolayer_affiliation <- monolayer_affiliation[monolayer_affiliation!=0]
cat(ifelse(length(monolayer_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
cat(length(monolayer_affiliation));cat('\t')
NMI_layers <- c(NMI_layers, MI(xtabs(~monolayer_affiliation+multilayer_affiliation)))
cat(NMI_layers[length(NMI_layers)]);cat('\t')
# Module affiliation in the aggregated networks
Q.agg_sum <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.agg_sum)
aggregated_sum_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_aggregated_sum.csv',sep=''),he=F,sep=',')))
aggregated_sum_affiliation <- aggregated_sum_affiliation[,maxrun]
aggregated_sum_affiliation <- aggregated_sum_affiliation[which(membershipRun[,2+l]!=0)] # the aggregated networks contains all the species so only take thse species that appear in the layer
cat(ifelse(length(aggregated_sum_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
MNI_aggregated_sum <- c(MNI_aggregated_sum, MI(xtabs(~aggregated_sum_affiliation+multilayer_affiliation)))
cat(MNI_aggregated_sum[length(MNI_aggregated_sum)]);cat('\t')
Q.agg_mean <- unname(data.matrix(read.table(paste(output_folder,'/Q_obs_aggregated_mean.csv',sep=''),he=F,sep=',')))
maxrun <- which.max(Q.agg_mean)
aggregated_mean_affiliation <- unname(data.matrix(read.table(paste(output_folder,'/S_obs_aggregated_mean.csv',sep=''),he=F,sep=',')))
aggregated_mean_affiliation <- aggregated_mean_affiliation[,maxrun]
aggregated_mean_affiliation <- aggregated_mean_affiliation[which(membershipRun[,2+l]!=0)] # the aggregated networks contains all the species so only take thse species that appear in the layer
cat(ifelse(length(aggregated_mean_affiliation)!=length(multilayer_affiliation),'Warning: lengths of species lists do not match',""));cat('\t')
MNI_aggregated_mean <- c(MNI_aggregated_mean, MI(xtabs(~aggregated_mean_affiliation+multilayer_affiliation)))
cat(MNI_aggregated_mean[length(MNI_aggregated_mean)]);cat('\n')
}
paste(mean(NMI_layers),sd(NMI_layers))
paste(mean(MNI_aggregated_sum),sd(MNI_aggregated_sum))
paste(mean(MNI_aggregated_mean),sd(MNI_aggregated_mean))
paste(mean(MNI_aggregated_mean),sd(MNI_aggregated_mean),range(MNI_aggregated_mean))
range(MNI_aggregated_mean)
shiny::runApp('~/Dropbox/RESEARCH/muxVizMac_LATEST')
library(ShinyDash)
runApp('~/Dropbox/RESEARCH/muxViz_ubuntu')
runApp('~/Dropbox/RESEARCH/muxViz_ubuntu')
source("version.R")
# Load libraries and functions -------------------------------------------------------------------------
library(bipartite)
library(igraph)
library(ggplot2)
library(reshape2)
library(stringr)
library(plyr)
library(RColorBrewer)
df2matrix <- function(df,binary=F){
rownames(df) <- df[,1]
df <- df[,-1]
df <- data.matrix(df)
if (binary){df[df>0] <- 1}
return(df)
}
# Each row in the data set is a single host specimen (individual). Matrix
# entries are the number of parasites recovered from each host specimen
dat <- read.csv('temporal_data.csv')
attach(dat)
hostAbundYear <- as.matrix(table(Host, YearCollected)) # abundance of hosts in different years
parasiteAbundanceYear <- aggregate(.~dat$YearCollected,data = dat[,3:ncol(dat)], FUN = sum) # abundance of parasites in each year (across hosts)
names(parasiteAbundanceYear)[1] <- 'YearCollected'
parasiteAbundanceYear <- df2matrix(parasiteAbundanceYear)
#### Create and write network layers
data.list <- list()
years <- 1982:1987
for (y in years){
idx <- which(years==y)
d <- dat[dat$YearCollected==y,]
d <- aggregate(.~d$Host, data=d[,2:ncol(d)], sum) # The total number of parasites found on a given host
d <- d[-2]
d <- df2matrix(d)
d <- sweep(d, 1, hostAbundYear[rownames(hostAbundYear)%in%rownames(d), idx], '/') # Average parasite abundance per host
missingHosts <- setdiff(rownames(hostAbundYear),rownames(d)) # All hosts have to appear in all matrices even if they were not present
d <- rbind(d,matrix(0,length(missingHosts),ncol(d),dimnames =  list(missingHosts,colnames(d)))) # Add missing host species so all matrices will have the same size
d <- d[sort(rownames(d)),] # sort by host so all matrices will have the same order
data.list[[idx]] <- d
write.table(d, paste('host_parasite_abundance_weighted_layer_',idx,'.csv',sep=''), row.names = F, col.names = F,sep=',')
}
names(data.list) <- years
sapply(data.list,dim)
aggregated_network_sum <- Reduce('+', data.list)
dim(aggregated_network_sum)
any(colSums(aggregated_network_sum)==0) #should be False
any(rowSums(aggregated_network_sum)==0) #should be False
aggregated_network_mean <- apply(simplify2array(data.list), 1:2, mean)
dim(aggregated_network_mean)
any(colSums(aggregated_network_mean)==0) #should be False
any(rowSums(aggregated_network_mean)==0) #should be False
library(d3heatmap)
library(rCharts)
resultFile <- paste(projectname,'_reducibility_jsd.txt',sep='')
currfolder <- getwd()
setwd(paste(currfolder,'/Reducibility',sep=''))
projectname <- 'host_parasite_temporal'
resultFile <- paste(projectname,'_reducibility_jsd.txt',sep='')
distanceMatrix <- matrix(scan(resultFile, n = length(data.list)^2), ncol=length(data.list), nrow=length(data.list), byrow = TRUE)
colnames(distanceMatrix) <- names(data.list)
rownames(distanceMatrix) <- names(data.list)
distanceMatrix.df <- as.data.frame(distanceMatrix)
d3heatmap(
distanceMatrix.df,
color = 'Blues',
labRow=names(data.list),
labCol=names(data.list),
cexRow=1,
cexCol=1,
hclustfun=function(x) hclust(x,method='ward.D2'),
symm=F,
dendrogram="both"
)
X11();plot(hclust(as.dist(distanceMatrix),
method='ward.D2'),
col = "#1F77B4", col.main = "#1F77B4", col.lab = "#E08400",
col.axis = "#E08400", lwd = 2,
labels=names(data.list),
cex=1,
main="Reducibility Dendrogram",
sub="",
xlab="")
resultFile <- paste(projectname,'_reducibility_quality.txt',sep='')
d <- read.table(resultFile, header=T, sep=" ")[,1:2]
colnames(d) <- c("Step", "Q")
linechart <- nPlot(Q ~ Step, data = d, type = 'lineChart')
linechart$addParams(width = 600, height = 400, title="Quality function")
linechart$xAxis(axisLabel="Step")
linechart$yAxis(axisLabel="Q")
linechart$chart(forceY=c(floor(min(d$Q)),floor(max(d$Q))+1),
forceX=c(floor(min(d$Step)),floor(max(d$Step))+1))
linechart
ggplot(d, aes(x=step, y=Q))+geom_point()
plot(d$Q~d$Step, type='b', xlab='Step', ylab='q')
plot(d$Q~d$Step, type='b', xlab='Step', ylab='q')
d3heatmap(
distanceMatrix.df,
color = 'Blues',
labRow=names(data.list),
labCol=names(data.list),
cexRow=1,
cexCol=1,
hclustfun=function(x) hclust(x,method='ward.D2'),
symm=F,
dendrogram="both"
)
svg('reducibility_dendrogram.svg')
X11();plot(hclust(as.dist(distanceMatrix),
method='ward.D2'),
col = "#1F77B4", col.main = "#1F77B4", col.lab = "#E08400",
col.axis = "#E08400", lwd = 2,
labels=names(data.list),
cex=1,
main="Reducibility Dendrogram",
sub="",
xlab="")
def.off()
dev.off()
dev.off()
dev.off()
svg('reducibility_dendrogram.svg')
plot(hclust(as.dist(distanceMatrix),
method='ward.D2'),
col = "#1F77B4", col.main = "#1F77B4", col.lab = "#E08400",
col.axis = "#E08400", lwd = 2,
labels=names(data.list),
cex=1,
main="Reducibility Dendrogram",
sub="",
xlab="")
dev.off()
svg('reducibility_heatmap.svg')
d3heatmap(
distanceMatrix.df,
color = 'Blues',
labRow=names(data.list),
labCol=names(data.list),
cexRow=1,
cexCol=1,
hclustfun=function(x) hclust(x,method='ward.D2'),
symm=F,
dendrogram="both"
)
dev.off()
dev.off()
svg('reducibility_heatmap.svg')
d3heatmap(
distanceMatrix.df,
color = 'Blues',
labRow=names(data.list),
labCol=names(data.list),
cexRow=1,
cexCol=1,
hclustfun=function(x) hclust(x,method='ward.D2'),
symm=F,
dendrogram="both"
)
dev.off()
heatmap(
distanceMatrix.df,
color = 'Blues',
labRow=names(data.list),
labCol=names(data.list),
cexRow=1,
cexCol=1,
hclustfun=function(x) hclust(x,method='ward.D2'),
symm=F,
dendrogram="both"
)
distanceMatrix.df
pdf('reducibility_heatmap.pdf')
d3heatmap(
distanceMatrix.df,
color = 'Blues',
labRow=names(data.list),
labCol=names(data.list),
cexRow=1,
cexCol=1,
hclustfun=function(x) hclust(x,method='ward.D2'),
symm=F,
dendrogram="both"
)
dev.off()
d3heatmap(
distanceMatrix.df,
color = 'Blues',
labRow=names(data.list),
labCol=names(data.list),
cexRow=1,
cexCol=1,
hclustfun=function(x) hclust(x,method='ward.D2'),
symm=F,
dendrogram="both"
)
plot(d$Q~d$Step, type='b', xlab='Step', ylab='q')
plot(d$Q~d$Step, type='b', xlab='Step', ylab='q',pch=19)
svg('reducibility_q.svg')
plot(d$Q~d$Step, type='b', xlab='Step', ylab='q',pch=19)
dev.off
dev.off()
dev.off()
plot(d$Q~d$Step, type='b', xlab='Step', ylab='q',pch=19, cex=2)
svg('reducibility_q.svg')
plot(d$Q~d$Step, type='b', xlab='Step', ylab='q',pch=19, cex=2)
dev.off()
heatmap(x=distanceMatrix.df)
distanceMatrix.df
heatmap(x=data.matrix(distanceMatrix.df))
svg('reducibility_dendrogram.svg')
plot(hclust(as.dist(distanceMatrix),
method='ward.D2'),
col = "#1F77B4", col.main = "#1F77B4", col.lab = "#E08400",
col.axis = "#E08400", lwd = 2,
labels=names(data.list),
cex=1,
main="Reducibility Dendrogram",
sub="",
xlab="")
dev.off()
dev.off()
svg('reducibility_heatmap.svg')
plot(hclust(as.dist(distanceMatrix),
method='ward.D2'),
col = "#1F77B4", col.main = "#1F77B4", col.lab = "#E08400",
col.axis = "#E08400", lwd = 2,
labels=names(data.list),
cex=1,
main="Reducibility Dendrogram",
sub="",
xlab="")
dev.off()
svg('reducibility_heatmap.svg')
heatmap(x=data.matrix(distanceMatrix.df))
dev.off()
heatmap(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2'))
linechart
plot(d$Q~d$Step, type='b', xlab='Step', ylab='q',pch=19, cex=2)
plot(hclust(as.dist(distanceMatrix),
method='ward.D2'),
col = "#1F77B4", col.main = "#1F77B4", col.lab = "#E08400",
col.axis = "#E08400", lwd = 2,
labels=names(data.list),
cex=1,
main="Reducibility Dendrogram",
sub="",
xlab="")
library(gplots)
heatmap.2(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2'), )
heatmap.2(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2') )
X11();heatmap.2(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2') )
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
heatmap.2(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2'),
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="row"     # only draw a row dendrogram
)
heatmap.2(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2'),
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="col"     # only draw a row dendrogram
)
heatmap.2(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2'),
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col='blues',       # use on color palette defined earlier
dendrogram="col"     # only draw a col dendrogram
)
my_palette <- brewer.pal(11,"RdBu")
heatmap.2(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2'),
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="col"     # only draw a col dendrogram
)
my_palette <- brewer.pal(100,"RdBu")
my_palette <- brewer.pal(100,"Blues")
heatmap.2(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2'),
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="col"     # only draw a col dendrogram
)
svg('reducibility_heatmap.svg')
heatmap.2(x=data.matrix(distanceMatrix.df), hclustfun = function(x) hclust(x,method='ward.D2'),
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="col"     # only draw a col dendrogram
)
dev.off()
dev.off()
